{"ast":null,"code":"var _jsxFileName = \"/Users/kristonmcconnell/monsters-rolodex/src/App.js\";\nimport { Component } from \"react\";\nimport logo from './logo.svg';\nimport './App.css';\n\n// TODO to change this from a functional component to a class component we changed function App() to\n// TODO class App extends Component and then put the entire return statement inside of a render() { }\n// TODO that's all we need to do to convert on a basic level\n// TODO render() is a method\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    // this state is always a json object\n    this.state = {\n      monsters: []\n    };\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: this.state.monsters.map(monster => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"h1\", {\n            children: [\" \", monster.name, \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 30,\n            columnNumber: 17\n          }, this)\n        }, monster.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 15\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default App;","map":{"version":3,"names":["Component","logo","jsxDEV","_jsxDEV","App","constructor","props","state","monsters","render","className","children","map","monster","name","fileName","_jsxFileName","lineNumber","columnNumber","id"],"sources":["/Users/kristonmcconnell/monsters-rolodex/src/App.js"],"sourcesContent":["import {Component} from \"react\";\n\nimport logo from './logo.svg';\nimport './App.css';\n\n// TODO to change this from a functional component to a class component we changed function App() to\n// TODO class App extends Component and then put the entire return statement inside of a render() { }\n// TODO that's all we need to do to convert on a basic level\n// TODO render() is a method\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    // this state is always a json object\n    this.state = {\n      monsters: [],\n    }\n  }\n\n  \n\n  render() {\n    return (\n      <div className=\"App\">\n        {\n          this.state.monsters.map((monster) => {\n            return (\n              <div key={monster.id}>\n                <h1> {monster.name} </h1>\n              </div>)\n          })\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;\n"],"mappings":";AAAA,SAAQA,SAAS,QAAO,OAAO;AAE/B,OAAOC,IAAI,MAAM,YAAY;AAC7B,OAAO,WAAW;;AAElB;AACA;AACA;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,MAAMC,GAAG,SAASJ,SAAS,CAAC;EAC1BK,WAAWA,CAACC,KAAK,EAAE;IACjB,KAAK,CAACA,KAAK,CAAC;;IAEZ;IACA,IAAI,CAACC,KAAK,GAAG;MACXC,QAAQ,EAAE;IACZ,CAAC;EACH;EAIAC,MAAMA,CAAA,EAAG;IACP,oBACEN,OAAA;MAAKO,SAAS,EAAC,KAAK;MAAAC,QAAA,EAEhB,IAAI,CAACJ,KAAK,CAACC,QAAQ,CAACI,GAAG,CAAEC,OAAO,IAAK;QACnC,oBACEV,OAAA;UAAAQ,QAAA,eACER,OAAA;YAAAQ,QAAA,GAAI,GAAC,EAACE,OAAO,CAACC,IAAI,EAAC,GAAC;UAAA;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI;QAAC,GADjBL,OAAO,CAACM,EAAE;UAAAJ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAEf,CAAC;MACV,CAAC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAED,CAAC;EAEV;AACF;AAEA,eAAed,GAAG"},"metadata":{},"sourceType":"module","externalDependencies":[]}